import React, { Component, Fragment } from 'react';
import {
  Pane,
  Dialog,
  RadioGroup,
  Button,
  UnlockIcon,
  toaster,
  DuplicateIcon,
} from 'evergreen-ui';
import { translate } from 'helpers/i18n';
import { storage, sendMessage } from 'helpers/webext';
import { debug, isDevEnv } from 'helpers/debug';
import { getValidUrl } from 'helpers/url';
import {
  UnblockOptions,
  isPageReloaded,
  defaultUnblockSettings,
} from 'helpers/block';
import { NumberInput, PasswordPrompt } from 'components';
import copy from 'copy-to-clipboard';
import './styles.scss';

export class Blocked extends Component {
  constructor(props) {
    super(props);

    const defaultUnblockTime = 10; // min
    this.state = {
      url: '',
      reason: '',
      message: translate('defaultBlockingMessage'),
      displayBlockedLink: true,
      hasUnblockButton: true,
      unblockDialog: {
        isShown: false,
        options: this.getUnblockOptions(defaultUnblockTime),
        selected: UnblockOptions.unblockOnce,
        time: defaultUnblockTime,
        requirePassword: false,
      },
    };
  }

  getUnblockOptions = (time) => {
    return [
      {
        label: translate('unblockOnce'),
        value: UnblockOptions.unblockOnce,
      },
      {
        label: (
          <Pane display="flex" alignItems="center" gap={10}>
            <span>{translate('unblockFor')}</span>
            <NumberInput
              min={1}
              max={720}
              width={65}
              value={time}
              onChange={(value) =>
                this.updateUnblockDialogState({
                  selected: UnblockOptions.unblockForWhile,
                  time: value,
                })
              }
            />
            <span>{translate('minutes')}</span>
          </Pane>
        ),
        value: UnblockOptions.unblockForWhile,
      },
    ];
  };

  componentDidMount() {
    const hash = window.location.hash;
    const queryStringInHash = hash.substring(hash.indexOf('?') + 1);
    const params = new URLSearchParams(queryStringInHash);

    let parsedUrl = params.get('url');
    let parsedReason = params.get('reason');

    let finalUrl = '';
    if (parsedUrl) {
      finalUrl = decodeURIComponent(parsedUrl);
      finalUrl = getValidUrl(finalUrl);
    }

    if (isDevEnv && !finalUrl) {
      finalUrl = 'https://www.example.com'; // Dev fallback
    }
    
    const finalReason = parsedReason ? decodeURIComponent(parsedReason) : 'REASON_NOT_IN_URL_PARAMS';
    
    this.setState({ 
      url: finalUrl, 
      reason: finalReason 
    });

    if (isPageReloaded() && finalUrl) {
      sendMessage('isUrlStillBlocked', finalUrl).then((isUrlStillBlocked) => {
        if (isUrlStillBlocked === false) {
          sendMessage('redirectSenderTab', finalUrl);
        }
      });
    }
    
    storage
      .get({
        message: '',
        unblock: {
          isEnabled: true,
          requirePassword: false,
        },
        password: {
          isEnabled: false,
        },
      })
      .then((items) => {
        if (items) {
          this.setState({
            message: items.message.length ? items.message : translate('defaultBlockingMessage'),
            displayBlockedLink: true,
            hasUnblockButton: items.unblock.isEnabled,
            unblockDialog: {
              ...this.state.unblockDialog,
              requirePassword:
                items.unblock.isEnabled &&
                items.unblock.requirePassword &&
                items.password.isEnabled,
            },
          });
        }
      });
  }

  updateUnblockDialogState = (state) => {
    this.setState({
      unblockDialog: {
        ...this.state.unblockDialog,
        ...state,
      },
    });
  };

  closeUnblockDialog = () => {
    this.updateUnblockDialogState({ isShown: false });
  };

  openUnblockDialog = () => {
    this.updateUnblockDialogState({ isShown: true });
  };

  unblock = () => {
    this.closeUnblockDialog();
    const params = {
      url: this.state.url,
      option: this.state.unblockDialog.selected,
      time: this.state.unblockDialog.time,
    };
    debug.log('unblocking:', params);
    if (this.state.url) {
      sendMessage('unblockSenderTab', params);
    }
  };
  
  copyBlockedLink = () => {
    if (copy(this.state.url)) {
      toaster.success(translate('copiedToClipboard'), {
        id: 'blocked-toaster',
      });
    }
  };
  
  render() {
    return (
      <Fragment>
        <div className="distract-cursor distract-select distract-overlay-container">
          <div className="distract-cursor distract-select distract-overlay">
            <div className="distract-cursor distract-select distract-info-container">
              <span className="distract-cursor distract-select distract-overlay-top-text">
                {this.state.message}
              </span>
              
              {this.state.displayBlockedLink && (
                <span className="distract-blocked-link">
                  <input type="text" value={this.state.url || ''} readOnly />
                  <button
                    className="copy"
                    title={translate('copy')}
                    onClick={this.copyBlockedLink}
                  >
                    <DuplicateIcon />
                  </button>
                </span>
              )}
              
              <div className="distract-cursor distract-select distract-overlay-img"></div>
              
              {this.state.hasUnblockButton && (
                <button className="unblock" onClick={this.openUnblockDialog}>
                  {translate('unblock')}
                </button>
              )}
            </div>
          </div>
        </div>

        <Dialog
          isShown={this.state.unblockDialog.isShown}
          onCloseComplete={this.closeUnblockDialog}
          shouldCloseOnOverlayClick={false}
          hasFooter={false}
          topOffset="40vmin"
          width={400}
          containerProps={{
            className: 'unblock-dialog',
            onKeyDown: (event) => {
              if (event.key === 'Enter') {
                this.unblock();
              }
            }
          }}
        >
          <Pane width="95%" margin="auto">
            <RadioGroup
              size={16}
              value={this.state.unblockDialog.selected}
              options={this.state.unblockDialog.options}
              onChange={(event) =>
                this.updateUnblockDialogState({
                  selected: event.target.value,
                })
              }
            />
            {this.state.unblockDialog.requirePassword ? (
              <PasswordPrompt
                hasHeader={false}
                hasFooter={false}
                minWidth="auto"
                minHeight={50}
                inputWidth="100%"
                maxInputWidth="auto"
                onSuccess={this.unblock}
              />
            ) : (
              <Pane
                display="flex"
                alignItems="center"
                justifyContent="center"
                marginTop={20}
              >
                <Button
                  height={32}
                  appearance="primary"
                  iconBefore={UnlockIcon}
                  onClick={this.unblock}
                >
                  {translate('unblock')}
                </Button>
              </Pane>
            )}
          </Pane>
        </Dialog>
        
        {isDevEnv && (
          <div className="reason-container">
            <p className="text-lg text-red-500 font-bold">
              Displaying Reason: {this.state.reason || 'No reason provided'}
            </p>
          </div>
        )}
      </Fragment>
    );
  }
}
